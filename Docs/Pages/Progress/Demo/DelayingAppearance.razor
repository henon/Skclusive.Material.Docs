@namespace Skclusive.Material.Docs
@inherits DisposableComponentBase

<div
   style="display: flex;
   align-items: center;
   flex-direction: column;">
   <div
      style="height: 40px;">
      <Fade
         In="@IsLoading"
         UnmountOnExit>
         <CircularProgress
            Style="@($"transition-delay: {LoadingTransitionDelay}")" />
      </Fade>
   </div>
   <Button
      OnClick="@HandleClickLoading"
      style="margin: 16px;">
      @LoadingText
   </Button>
   <div
      style="height: 40px;">
      @if (IsQuerySuccess)
      {
         <Typography>Success!</Typography>
      } else
      {
         <Fade
            In="@IsQueryProgress"
            UnmountOnExit>
            <CircularProgress
               Style="@($"transition-delay: {QueryTransitionDelay}")" />
         </Fade>
      }
   </div>
   <Button
      OnClick="@HandleClickQuery"
      style="margin: 16px;">
      @QueryText
   </Button>
</div>

@code
{
   private string QueryTransitionDelay => IsQueryProgress ? "800ms" : "0ms";

   private bool IsQuerySuccess => Query == "success";

   private bool IsQueryProgress => Query == "progress";

   private string QueryText => Query != "idle" ? "Reset" : "Simulate a load";

   private string Query { set; get; } = "idle";

   private IDisposable QueryDisposable { set; get; }

   private void HandleClickQuery(EventArgs args)
   {
      QueryDisposable?.Dispose();

      QueryDisposable = null;

      if (Query != "idle")
      {
         Query = "idle";

         StateHasChanged();

         return;
      }

      Query = "progress";

      StateHasChanged();

      QueryDisposable = RunTimeout(() =>
      {
         Query = "success";

         StateHasChanged();

      }, 2000);
   }

   private string LoadingTransitionDelay => IsLoading ? "800ms" : "0ms";

   private string LoadingText => IsLoading ? "Stop loading" : "Loading";

   private bool IsLoading { set; get; }

   private void HandleClickLoading(EventArgs args)
   {
      IsLoading = !IsLoading;

      StateHasChanged();
   }
}