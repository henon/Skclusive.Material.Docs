@namespace Skclusive.Material.Docs
@inherits MaterialComponentBase

<Markdown
    Class="@_Class"
    Style="@_Style"
    Text="@(@"
```css
<style>
    .demo-purple-switch {
        color: #ba68c8;
    }
    .demo-purple-switch.Switch-Checked {
        color: #9c27b0;
    }
    .demo-purple-switch.Switch-Checked + .demo-purple-switch-track {
        background-color: #9c27b0;
    }
</style>

<style>
    .demo-ios-switch-root {
        width: 42px;
        height: 26px;
        margin: 8px;
        padding: 0;
    }
    .demo-ios-switch {
        padding: 1px;
    }
    .demo-ios-switch.Switch-Checked {
        color: var(--theme-palette-common-white);
        transform: translateX(16px);
    }
    .demo-ios-switch.demo-ios-switch-focus-visible .demo-ios-switch-thumb {
        color: #52d869;
        border: 6px solid #fff;
    }
    .demo-ios-switch.Switch-Checked + .demo-ios-switch-track {
        border: none;
        opacity: 1;
        background-color: #52d869;
    }
    .demo-ios-switch-thumb {
        width: 24px;
        height: 24px;
    }
    .demo-ios-switch-track {
        border: 1px solid #bdbdbd;
        opacity: 1;
        transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
        border-radius: 13px;
        background-color: #fafafa;
    }
</style>

<style>
    .demo-ant-switch-root {
        width: 28px;
        height: 16px;
        display: flex;
        padding: 0;
    }
    .demo-ant-switch {
        color: #9e9e9e;
        padding: 2px;
    }
    .demo-ant-switch.Switch-Checked {
        color: var(--theme-palette-common-white);
        transform: translateX(12px);
    }
    .demo-ant-switch.Switch-Checked + .demo-ant-switch-track {
        opacity: 1;
        border-color: var(--theme-palette-primary-main);
        background-color: var(--theme-palette-primary-main);
    }
    .demo-ant-switch-thumb {
        width: 12px;
        height: 12px;
        box-shadow: none;
    }
    .demo-ant-switch-track {
        border: 1px solid #9e9e9e;
        opacity: 1;
        border-radius: 8px;
        background-color: var(--theme-palette-common-white);
    }
</style>
```

```html
<FormGroup>
    <FormControlLabel
        Label=""Custom color"">
        <Switch
            SwitchBaseClass=""demo-purple-switch""
            TrackClass=""demo-purple-switch-track""
            Checked=""@CheckedA""
            Value=""CheckedA""
            OnChange=""@OnCheckedAChanged"" />
    </FormControlLabel>
    <FormControlLabel
        Label=""iOS style"">
        <Switch
            Class=""demo-ios-switch-root""
            SwitchBaseClass=""demo-ios-switch""
            TrackClass=""demo-ios-switch-track""
            ThumbClass=""demo-ios-switch-thumb""
            FocusVisibleClass=""demo-ios-switch-focus-visible""
            DisableRipple
            Checked=""@CheckedB""
            OnChange=""@OnCheckedBChanged""
            Value=""CheckedB"" />
    </FormControlLabel>
    <Typography
        Component=""div"">
        <Grid
            Component=""label""
            Container
            AlignItems=""@AlignItems.Center""
            Spacing=""@Spacing.One"">
            <Grid
                Item>
                Off
            </Grid>
            <Grid
                Item>
                <Switch
                    Class=""demo-ant-switch-root""
                    SwitchBaseClass=""demo-ant-switch""
                    TrackClass=""demo-ant-switch-track""
                    ThumbClass=""demo-ant-switch-thumb""
                    Checked=""@CheckedC""
                    Value=""CheckedC""
                    OnChange=""@OnCheckedCChanged"" />
            </Grid>
            <Grid
                Item>
                On
            </Grid>
        </Grid>
    </Typography>
</FormGroup>
```

```csharp
@code
{
    private bool CheckedA { set; get; } = true;

    private bool CheckedB { set; get; } = true;

    private bool CheckedC { set; get; } = true;

    private void OnCheckedAChanged(EventArgs args)
    {
        CheckedA = !CheckedA;

        StateHasChanged();
    }

    private void OnCheckedBChanged(EventArgs args)
    {
        CheckedB = !CheckedB;

        StateHasChanged();
    }

    private void OnCheckedCChanged(EventArgs args)
    {
        CheckedC = !CheckedC;

        StateHasChanged();
    }
}
```
")" />