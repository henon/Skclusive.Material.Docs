@inherits LayoutComponentBase

<style>
    .app-bar {
        transition: margin 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms;
    }

    .app-bar-shift {
        width: calc(100% - 240px); 
        transition: margin 225ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,width 225ms cubic-bezier(0.0, 0, 0.2, 1) 0ms; 
        margin-left: 240px;
    }

    main.content {
        padding: 24px; 
        flex-grow: 1; 
        transition: margin 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms; 
        margin-left: 0;
    }
    main.content-shift {
        transition: margin 225ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
        margin-left: 240px;
    }

    .drawer-header {
        display: flex;
        padding: 0px 8px;
        /*min-height: 56px;*/
        align-items: center;
        justify-content: flex-end;
    }
</style>

<div style="display: flex;">
    <Baseline />
    <AppBar Position="@AppBarPosition.Fixed" Class="@AppBarClass">
        <Toolbar>
            <IconButton
                Color="@Color.Inherit"
                aria-label="open drawer"
                OnClick="@OnOpen"
                Edge="@IconButtonEdge.Start"
                Style="@IconStyle">
                <MenuIcon />
            </IconButton>
            <Typography Variant="@TypographyVariant.H6" NoWrap>
                Skclusive Material Components
            </Typography>
        </Toolbar>
    </AppBar>
    <Sidebar Open="@Open" OnClose="@OnClose" />
    <main class="@MainClass">
        <div class="Toolbar-Regular drawer-header" />
        @Body
    </main>
</div>

@code
{
    private bool Open { set; get; } = true;

    private string IconStyle => "margin-right: 16px;" + (Open ? " display: none;" : "");

    private string MainClass => "content" + (Open ? " content-shift" : "");

    private string AppBarClass => "app-bar" + (Open ? " app-bar-shift" : "");

    private string Text => (Open ? "Close" : "Open") + " Drawer";

    private void OnClose()
    {
        Open = false;

        StateHasChanged();
    }

    private void OnOpen()
    {
        Open = true;

        StateHasChanged();
    }

    private void OnToggle()
    {
        Open = !Open;

        StateHasChanged();
    }
}