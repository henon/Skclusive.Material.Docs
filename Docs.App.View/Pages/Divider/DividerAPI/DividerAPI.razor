@namespace Skclusive.Material.Docs.App.View

<MarkdownSegment
    Text="@(@"
# Divider API

<p class=""description"">The API documentation of the Divider component. Learn more about instation, the parameters and the CSS customization points.</p>

## Installing with Nuget

You can [install Divider package](https://www.nuget.org/packages/Skclusive.Material.Divider/) by typing the below command in your terminal:

```csharp
dotnet add package Skclusive.Material.Divider
```

Then, you can import it in your `_Imports.razor`.

```csharp
@using Skclusive.Material.Divider;
```

Then, you can render the style for this component it in your `Router.razor`.

```html
<DividerStyle />
```

## Parameters

| Name | Type | Default | Description |
|:-----|:-----|:--------|:------------|
| <span class=""prop-name"">RootRef</span> | <span class=""prop-type"">IReference</span> | <span class=""prop-default"">new Reference()</span> | The reference used to ref the root node. |
| <span class=""prop-name"">Class</span> | <span class=""prop-type"">string</span> | | The class applied to the root node. |
| <span class=""prop-name"">Style</span> | <span class=""prop-type"">string</span> | | The style applied to the root node. |
| <span class=""prop-name"">Component</span> | <span class=""prop-type"">string</span> | <span class=""prop-default"">'hr'</span> | The component used for the root node. |
| <span class=""prop-name"">ChildContent</span> | <span class=""prop-type"">RenderFragment</span> |  | Used to render icon or text elements inside the Divider. `src` and `alt` props will not be used and no `img` will be rendered by default.<br>This can be an element, or just a string. |
| <span class=""prop-name"">Absolute</span> | <span class=""prop-type"">bool</span> | <span class=""prop-default"">false</span> | Absolutely position the element. |
| <span class=""prop-name"">Light</span> | <span class=""prop-type"">bool</span> | <span class=""prop-default"">false</span> | If `true`, the divider will have a lighter color. |
| <span class=""prop-name"">Orientation</span> | <span class=""prop-type"">Orientation.Horizontal<br>&#124;&nbsp;Orientation.Vertical</span> | <span class=""prop-default"">Orientation.Horizontal</span> | The divider orientation. |
| <span class=""prop-name"">Variant</span> | <span class=""prop-type"">DividerVariant.FullWidth<br>&#124;&nbsp;DividerVariant.Inset<br>&#124;&nbsp;DividerVariant.Middle</span> | <span class=""prop-default"">DividerVariant.FullWidth</span> | The variant to use. |

## CSS

- Style name: `Divider`.
- Style details:

| Global class | Description |
|:-------------|:------------|
| <span class=""prop-name"">Divider-Root</span> | Styles applied to the root element.
| <span class=""prop-name"">Divider-Absolute</span> | Styles applied to the root element if `Absolute=""true""`.
| <span class=""prop-name"">Divider-Inset</span> | Styles applied to the root element if `Variant=""@DividerVariant.Inset""`.
| <span class=""prop-name"">Divider-Light</span> | Styles applied to the root element if `Light=""true""`.
| <span class=""prop-name"">Divider-Middle</span> | Styles applied to the root element if `Variant=""@DividerVariant.Middle""`.
| <span class=""prop-name"">Divider-Vertical</span> | Styles applied to the root element if `Orientation=""@Orientation.Vertical""`.

You can override the style of the component as below:

- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).

If that's not sufficient, you can check the [implementation of the component](https://github.com/skclusive/Skclusive.Material.Component/blob/master/Divider/src/Divider/Divider.cs) for more detail.

")" />
