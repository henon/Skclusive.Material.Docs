@namespace Skclusive.Material.Docs.App.View
@page "/badge"

<div>
    <Markdown
         Text="@(@"
---
title: Badge Blazor component
components: Badge
---

# Badges

<p class=""description"">Badge generates a small badge to the top-right of its child(ren).</p>

## Simple Badges

Examples of badges containing text, using primary and secondary colors. The badge is applied to its children.

{{""blazor"": ""Skclusive.Material.Docs.App.View.SimpleBadge, Skclusive.Material.Docs.App.View""}}

## Customized badges

Here are some examples of customizing the component. You can learn more about this in the [overrides documentation page](/customization/components/).

{{""blazor"": ""Skclusive.Material.Docs.App.View.CustomizedBadges, Skclusive.Material.Docs.App.View""}}

## Badge visibility

The visibility of badges can be controlled using the `invisible` property.

The badge auto hides with badgeContent is zero. You can override this with the `showZero` property.

{{""blazor"": ""Skclusive.Material.Docs.App.View.BadgeVisibility, Skclusive.Material.Docs.App.View""}}

## Maximum Value

You can use the `max` property to cap the value of the badge content.

{{""blazor"": ""Skclusive.Material.Docs.App.View.BadgeMax, Skclusive.Material.Docs.App.View""}}

## Dot Badge

The `dot` property changes a badge into a small dot. This can be used as a notification that something has changed without giving a count.

{{""blazor"": ""Skclusive.Material.Docs.App.View.DotBadge, Skclusive.Material.Docs.App.View""}}

## Badge overlap

You can use the `overlap` property to place the badge relative to the corner of the wrapped element.

{{""blazor"": ""Skclusive.Material.Docs.App.View.BadgeOverlap, Skclusive.Material.Docs.App.View""}}

## Badge alignment

You can use the `horizontalAlignment` and `verticalAlignment` properties to move the badge to any corner of the wrapped element.

{{""blazor"": ""Skclusive.Material.Docs.App.View.BadgeAlignment, Skclusive.Material.Docs.App.View""}}

# Badge API

<p class=""description"">The API documentation of the Badge component. Learn more about installation, the parameters and the CSS customization points.</p>

## Installing with Nuget

You can [install Badge package](https://www.nuget.org/packages/Skclusive.Material.Badge/) by typing the below command in your terminal:

```csharp
dotnet add package Skclusive.Material.Badge
```

Then, you can import it in your `_Imports.razor`.

```csharp
@using Skclusive.Material.Badge;
```

Then, you can render the style for this component it in your `Router.razor`.

```html
<BadgeStyle />
```

## Props

| Name | Type | Default | Description |
|:-----|:-----|:--------|:------------|
| <span class=""prop-name"">RootRef</span> | <span class=""prop-type"">IReference</span> | <span class=""prop-default"">new Reference()</span> | The reference used to ref the root node. |
| <span class=""prop-name"">Class</span> | <span class=""prop-type"">string</span> | | The class applied to the root node. |
| <span class=""prop-name"">Style</span> | <span class=""prop-type"">string</span> | | The style applied to the root node. |
| <span class=""prop-name"">Component</span> | <span class=""prop-type"">string</span> | <span class=""prop-default"">'div'</span> | The component used for the root node. |
| <span class=""prop-name"">ChildContent</span> | <span class=""prop-type"">RenderFragment</span> |  | The badge will be added relative to this node. |
| <span class=""prop-name"">anchorOrigin</span> | <span class=""prop-type"">{ horizontal: 'left'<br>&#124;&nbsp;'right', vertical: 'bottom'<br>&#124;&nbsp;'top' }</span> | <span class=""prop-default"">{  vertical: 'top',  horizontal: 'right',}</span> | The anchor of the badge. |
| <span class=""prop-name"">badgeContent</span> | <span class=""prop-type"">node</span> |  | The content rendered within the badge. |
| <span class=""prop-name"">Color</span> | <span class=""prop-type"">'default'<br>&#124;&nbsp;'error'<br>&#124;&nbsp;'primary'<br>&#124;&nbsp;'secondary'</span> | <span class=""prop-default"">'default'</span> | The color of the component. It supports those theme colors that make sense for this component. |
| <span class=""prop-name"">Invisible</span> | <span class=""prop-type"">bool</span> |  | If `true`, the badge will be invisible. |
| <span class=""prop-name"">Max</span> | <span class=""prop-type"">number</span> | <span class=""prop-default"">99</span> | Max count to show. |
| <span class=""prop-name"">Overlap</span> | <span class=""prop-type"">'circle'<br>&#124;&nbsp;'rectangle'</span> | <span class=""prop-default"">'rectangle'</span> | Wrapped shape the badge should overlap. |
| <span class=""prop-name"">ShowZero</span> | <span class=""prop-type"">bool</span> | <span class=""prop-default"">false</span> | Controls whether the badge is hidden when `badgeContent` is zero. |
| <span class=""prop-name"">Variant</span> | <span class=""prop-type"">'dot'<br>&#124;&nbsp;'standard'</span> | <span class=""prop-default"">'standard'</span> | The variant to use. |

## CSS

- Style name: `Badge`.
- Style details:

| Global class | Description |
|:-------------|:------------|
| <span class=""prop-name"">Badge-root</span> | Styles applied to the root element.
| <span class=""prop-name"">Badge-badge</span> | Styles applied to the badge `span` element.
| <span class=""prop-name"">Badge-colorPrimary</span> | Styles applied to the root element if `color=""primary""`.
| <span class=""prop-name"">Badge-colorSecondary</span> | Styles applied to the root element if `color=""secondary""`.
| <span class=""prop-name"">Badge-colorError</span> | Styles applied to the root element if `color=""error""`.
| <span class=""prop-name"">Badge-dot</span> | Styles applied to the root element if `variant=""dot""`.
| <span class=""prop-name"">Badge-anchorOriginTopRightRectangle</span> | Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=""rectangle""`.
| <span class=""prop-name"">Badge-anchorOriginBottomRightRectangle</span> | Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=""rectangle""`.
| <span class=""prop-name"">Badge-anchorOriginTopLeftRectangle</span> | Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=""rectangle""`.
| <span class=""prop-name"">Badge-anchorOriginBottomLeftRectangle</span> | Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=""rectangle""`.
| <span class=""prop-name"">Badge-anchorOriginTopRightCircle</span> | Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=""circle""`.
| <span class=""prop-name"">Badge-anchorOriginBottomRightCircle</span> | Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=""circle""`.
| <span class=""prop-name"">Badge-anchorOriginTopLeftCircle</span> | Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=""circle""`.
| <span class=""prop-name"">Badge-anchorOriginBottomLeftCircle</span> | Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=""circle""`.
| <span class=""prop-name"">Badge-invisible</span> | Pseudo-class to the badge `span` element if `invisible={true}`.

You can override the style of the component as below:

- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).

If that's not sufficient, you can check the [implementation of the component](https://github.com/skclusive/Skclusive.Material.Component/blob/master/Badge/src/Badge/Badge.cs) for more detail.

")" />
</div>