@namespace Skclusive.Material.Docs.App.View

<style>
    .radio-anchor {
        color: #43a047;
    }
    .radio-anchor.Radio-Checked {
        color: #4caf50;
    }
</style>

<div>
    <Grid
        Container
        Justify="@Justify.Center">
        <Grid
            Item
            Style="position: relative; margin-bottom: 32px;">
            <Button
                Variant="@ButtonVariant.Contained"
                OnClick="@HandleOpen"
                RootRef="@AnchorRef">
                Open Popover
            </Button>
            @if (AnchorType == AnchorType.Element)
            {
                <div
                    style="@($"width: 10px; height: 10px; position: absolute; border-radius: 50%; background-color: #4caf50; {AnchorStyle}")" />
            }
        </Grid>
    </Grid>
    <Popover
        Open="@Open"
        AnchorRef="@AnchorRef"
        OnClose="@HandleClose"
        AnchorType="@AnchorType"
        AnchorLeft="@AnchorLeft"
        AnchorTop="@AnchorTop"
        AnchorVerticalOrigin="@AnchorVerticalOrigin"
        AnchorHorizontalOrigin="@AnchorHorizontalOrigin"
        TransformVerticalOrigin="@TransformVerticalOrigin"
        TransformHorizontalOrigin="@TransformHorizontalOrigin">
        <Typography
            Style="margin: 16px;">
            The content of the Popover.
        </Typography>
    </Popover>
    <Grid
        Container
        Spacing="@Spacing.Two">
        <Grid
            Item
            ExtraSmall="@GridSize.Twelve"
            Small="@GridSize.Six">
            <FormControl
                Component="fieldset">
                <FormLabel
                    Component="legend">
                    AnchorType
                </FormLabel>
                <RadioGroup
                    Row
                    aria-label="anchor type"
                    Name="AnchorType"
                    Value="@AnchorType.ToString()"
                    OnChange="@OnAnchorTypeChange">
                    <FormControlLabel
                        Label="AnchorType.Element">
                        <Radio
                            Value="@AnchorType.Element.ToString()" />
                    </FormControlLabel>
                    <FormControlLabel
                        Label="AnchorType.Location">
                        <Radio
                            Value="@AnchorType.Location.ToString()" />
                    </FormControlLabel>
                </RadioGroup>
            </FormControl>
        </Grid>
        <Grid
            Item
            ExtraSmall="@GridSize.Twelve"
            Small="@GridSize.Six">
            <FormControl>
                <InputLabel
                    For="anchor-top">
                    AnchorTop
                </InputLabel>
                <StandardInput
                    Id="anchor-top"
                    Type="number"
                    Value="@AnchorTop.ToString()"
                    OnChange="@OnAnchorTopChange" />
            </FormControl>
            &nbsp;
            <FormControl>
                <InputLabel
                    For="anchor-left">
                    AnchorLeft
                </InputLabel>
                <StandardInput
                    Id="anchor-left"
                    Type="number"
                    Value="@AnchorLeft.ToString()"
                    OnChange="@OnAnchorLeftChange" />
            </FormControl>
        </Grid>
        <Grid
            Item
            ExtraSmall="@GridSize.Twelve"
            Small="@GridSize.Six">
            <FormControl
                Component="fieldset">
                <FormLabel
                    Component="legend">
                    AnchorVerticalOrigin
                </FormLabel>
                <RadioGroup
                    aria-label="anchor vertical origin"
                    Name="AnchorVerticalOrigin"
                    Value="@AnchorVerticalOrigin.ToString()"
                    OnChange="@OnAnchorVerticalOriginChange">
                    <FormControlLabel
                        Label="Top">
                        <Radio
                            Class="radio-anchor"
                            Value="@VerticalOrigin.Top.ToString()" />
                    </FormControlLabel>
                    <FormControlLabel
                        Label="Center">
                        <Radio
                            Class="radio-anchor"
                            Value="@VerticalOrigin.Center.ToString()" />
                    </FormControlLabel>
                    <FormControlLabel
                        Label="Bottom">
                        <Radio
                            Class="radio-anchor"
                            Value="@VerticalOrigin.Bottom.ToString()" />
                    </FormControlLabel>
                </RadioGroup>
            </FormControl>
        </Grid>
        <Grid
            Item
            ExtraSmall="@GridSize.Twelve"
            Small="@GridSize.Six">
            <FormControl
                Component="fieldset">
                <FormLabel
                    Component="legend">
                    TransformVerticalOrigin
                </FormLabel>
                <RadioGroup
                    aria-label="transform vertical origin"
                    Name="TransformVerticalOrigin"
                    Value="@TransformVerticalOrigin.ToString()"
                    OnChange="@OnTransformVerticalOriginChange">
                    <FormControlLabel
                        Label="Top">
                        <Radio
                            Color="@Color.Primary"
                            Value="@VerticalOrigin.Top.ToString()" />
                    </FormControlLabel>
                    <FormControlLabel
                        Label="Center">
                        <Radio
                            Color="@Color.Primary"
                            Value="@VerticalOrigin.Center.ToString()" />
                    </FormControlLabel>
                    <FormControlLabel
                        Label="Bottom">
                        <Radio
                            Color="@Color.Primary"
                            Value="@VerticalOrigin.Bottom.ToString()" />
                    </FormControlLabel>
                </RadioGroup>
            </FormControl>
        </Grid>
        <Grid
            Item
            ExtraSmall="@GridSize.Twelve"
            Small="@GridSize.Six">
            <FormControl
                Component="fieldset">
                <FormLabel
                    Component="legend">
                    AnchorHorizontalOrigin
                </FormLabel>
                <RadioGroup
                    Row
                    aria-label="anchor horizontal origin"
                    Name="AnchorHorizontalOrigin"
                    Value="@AnchorHorizontalOrigin.ToString()"
                    OnChange="@OnAnchorHorizontalOriginChange">
                    <FormControlLabel
                        Label="Left">
                        <Radio
                            Class="radio-anchor"
                            Value="@HorizontalOrigin.Left.ToString()" />
                    </FormControlLabel>
                    <FormControlLabel
                        Label="Center">
                        <Radio
                            Class="radio-anchor"
                            Value="@HorizontalOrigin.Center.ToString()" />
                    </FormControlLabel>
                    <FormControlLabel
                        Label="Right">
                        <Radio
                            Class="radio-anchor"
                            Value="@HorizontalOrigin.Right.ToString()" />
                    </FormControlLabel>
                </RadioGroup>
            </FormControl>
        </Grid>
        <Grid
            Item
            ExtraSmall="@GridSize.Twelve"
            Small="@GridSize.Six">
            <FormControl
                Component="fieldset">
                <FormLabel
                    Component="legend">
                    TransformHorizontalOrigin
                </FormLabel>
                <RadioGroup
                    Row
                    aria-label="Transform horizontal origin"
                    Name="TransformHorizontalOrigin"
                    Value="@TransformHorizontalOrigin.ToString()"
                    OnChange="@OnTransformHorizontalOriginChange">
                    <FormControlLabel
                        Label="Left">
                        <Radio
                            Color="@Color.Primary"
                            Value="@HorizontalOrigin.Left.ToString()" />
                    </FormControlLabel>
                    <FormControlLabel
                        Label="Center">
                        <Radio
                            Color="@Color.Primary"
                            Value="@HorizontalOrigin.Center.ToString()" />
                    </FormControlLabel>
                    <FormControlLabel
                        Label="Right">
                        <Radio
                            Color="@Color.Primary"
                            Value="@HorizontalOrigin.Right.ToString()" />
                    </FormControlLabel>
                </RadioGroup>
            </FormControl>
        </Grid>
    </Grid>
    <MarkdownCode
        Text="@Code" />
</div>

@code
{
    private static readonly Dictionary<VerticalOrigin, string> AnchorVerticalStyles = new Dictionary<VerticalOrigin, string>
    {
        { VerticalOrigin.Top, "top: -5px;" },

        { VerticalOrigin.Center, "top: calc(50% - 5px);" },

        { VerticalOrigin.Bottom, "bottom: -5px;" }
    };

    private static readonly Dictionary<HorizontalOrigin, string> AnchorHorizontalStyles = new Dictionary<HorizontalOrigin, string>
    {
        { HorizontalOrigin.Left, "left: -5px;" },

        { HorizontalOrigin.Center, "left: calc(50% - 5px);" },

        { HorizontalOrigin.Right, "right: -5px;" }
    };

    private string Code => $@"
```html
<Popover
    AnchorType=""AnchorType.{AnchorType}""
    AnchorLeft=""{AnchorLeft}""
    AnchorTop=""{AnchorTop}""
    AnchorVerticalOrigin=""VerticalOrigin.{AnchorVerticalOrigin}""
    AnchorHorizontalOrigin=""HorizontalOrigin.{AnchorHorizontalOrigin}""
    TransformVerticalOrigin=""VerticalOrigin.{TransformVerticalOrigin}""
    TransformHorizontalOrigin=""HorizontalOrigin.{TransformHorizontalOrigin}"">
    The content of the Popover.
</Popover>
```
    ";

    private bool Open { set; get; }

    private IReference AnchorRef { set; get; } = new Reference();

    private double AnchorLeft { set; get; }

    private double AnchorTop { set; get; }

    private AnchorType AnchorType { set; get; }

    private VerticalOrigin AnchorVerticalOrigin { set; get; }

    private HorizontalOrigin AnchorHorizontalOrigin { set; get; }

    private VerticalOrigin TransformVerticalOrigin { set; get; }

    private HorizontalOrigin TransformHorizontalOrigin { set; get; }

    private string AnchorStyle => $"{AnchorVerticalStyles[AnchorVerticalOrigin]} {AnchorHorizontalStyles[AnchorHorizontalOrigin]}";

    private void OnAnchorTopChange(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value.ToString(), out double anchorTop))
        {
            AnchorTop = anchorTop;

            StateHasChanged();
        }
    }

    private void OnAnchorLeftChange(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value.ToString(), out double anchorLeft))
        {
            AnchorLeft = anchorLeft;

            StateHasChanged();
        }
    }

    private void OnAnchorTypeChange(ChangeEventArgs args)
    {
        if (Enum.TryParse(args.Value.ToString(), out AnchorType anchorType))
        {
            AnchorType = anchorType;

            StateHasChanged();
        }
    }

    private void OnAnchorVerticalOriginChange(ChangeEventArgs args)
    {
        if (Enum.TryParse(args.Value.ToString(), out VerticalOrigin verticalOrigin))
        {
            AnchorVerticalOrigin = verticalOrigin;

            StateHasChanged();
        }
    }

    private void OnAnchorHorizontalOriginChange(ChangeEventArgs args)
    {
        if (Enum.TryParse(args.Value.ToString(), out HorizontalOrigin horizontalOrigin))
        {
            AnchorHorizontalOrigin = horizontalOrigin;

            StateHasChanged();
        }
    }

    private void OnTransformVerticalOriginChange(ChangeEventArgs args)
    {
        if (Enum.TryParse(args.Value.ToString(), out VerticalOrigin verticalOrigin))
        {
            TransformVerticalOrigin = verticalOrigin;

            StateHasChanged();
        }
    }

    private void OnTransformHorizontalOriginChange(ChangeEventArgs args)
    {
        if (Enum.TryParse(args.Value.ToString(), out HorizontalOrigin horizontalOrigin))
        {
            TransformHorizontalOrigin = horizontalOrigin;

            StateHasChanged();
        }
    }

    private void HandleClose()
    {
        Open = false;

        StateHasChanged();
    }

    private void HandleOpen()
    {
        Open = true;

        StateHasChanged();
    }
}
