@namespace Skclusive.Material.Docs.App.View
@page "/table"

<div>
    <Markdown
         Text="@(@"
---
title: Table Blazor component
components: Table, TableBody, TableCell, TableFooter, TableHead, TablePagination, TableRow, TableSortLabel
---

# Tables

<p class=""description"">Data tables display sets of data. They can be fully customized.</p>

[Data tables](https://material.io/design/components/data-tables.html) display information in a way that’s easy to scan, so that users can look for patterns and insights. They can be embedded in primary content, such as cards.

Data tables can include:

- A corresponding visualization
- Navigation
- Tools to query and manipulate data

When including tools, they should be placed directly above or below the table.

## Installing with Nuget

You can [install Table package](https://www.nuget.org/packages/Skclusive.Material.Table/) by typing the below command in your terminal:

`dotnet add package Skclusive.Material.Table`

Then, you can import it in your _Imports.razor.

```csharp
@using Skclusive.Material.Table;
```

## Structure

A data table contains a header row at the top that lists column names, followed by rows for data.

Checkboxes should accompany each row if the user needs to select or manipulate data.

For accessibility, the first column is set to be a `<th>` element, with a `scope` of `""row""`. This enables screen readers to identify a cell's value by it's row and column name.

## Simple Table

A simple example with no frills.

{{""demo"": ""Skclusive.Material.Docs.App.View.SimpleTable, Skclusive.Material.Docs.App.View""}}

## Dense Table

A simple example of a dense table with no frills.

{{""demo"": ""Skclusive.Material.Docs.App.View.DenseTable, Skclusive.Material.Docs.App.View""}}

## Sorting and Selecting

This example demonstrates the use of `Checkbox` and clickable rows for selection, with a custom `Toolbar`. It uses the `TableSortLabel` component to help style column headings.

The Table has been given a fixed width to demonstrate horizontal scrolling.

{{""demo"": ""Skclusive.Material.Docs.App.View.EnhancedTable, Skclusive.Material.Docs.App.View""}}

## Customized tables

Here is an example of customizing the component. You can learn more about this in the
[overrides documentation page](/customization/components/).

{{""demo"": ""Skclusive.Material.Docs.App.View.CustomizedTables, Skclusive.Material.Docs.App.View""}}

## Custom Table Pagination Action

The `Action` property of the `TablePagination` component allows the implementation of
custom actions.

{{""demo-x"": ""pages/components/tables/CustomPaginationActionsTable.js""}}

## Fixed header

An example of a table with scrollable rows and fixed column headers.
It leverages the `stickyHeader` prop (⚠️ no IE 11 support).

{{""demo"": ""Skclusive.Material.Docs.App.View.StickyHeadTable, Skclusive.Material.Docs.App.View""}}

## Spanning Table

A simple example with spanning rows & columns.

{{""demo"": ""Skclusive.Material.Docs.App.View.SpanningTable, Skclusive.Material.Docs.App.View""}}

## Accessibility

(WAI tutorial: https://www.w3.org/WAI/tutorials/tables/)

### Caption

A caption functions like a heading for a table. Most screen readers announce the content of captions. Captions help users to find a table and understand what it’s about and decide if they want to read it.

{{""demo"": ""Skclusive.Material.Docs.App.View.AcccessibleTable, Skclusive.Material.Docs.App.View""}}

")" />
</div>