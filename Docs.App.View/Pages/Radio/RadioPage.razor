@namespace Skclusive.Material.Docs.App.View
@page "/radio"

<div>
    <Markdown
         Text="@(@"
---
title: Radio buttons Blazor component
components: Radio, RadioGroup, FormControl, FormLabel, FormControlLabel
---

# Radio buttons

<p class=""description"">Radio buttons allow the user to select one option from a set.</p>

## Installing with Nuget

You can [install Selection package](https://www.nuget.org/packages/Skclusive.Material.Selection/) by typing the below command in your terminal:

`dotnet add package Skclusive.Material.Selection`

Then, you can import it in your _Imports.razor.

```csharp
@using Skclusive.Material.Selection;
```

Use [radio buttons](https://material.io/design/components/selection-controls.html#radio-buttons) when the user needs to see all available options.
If available options can be collapsed, consider using a dropdown menu because it uses less space.

Radio buttons should have the most commonly used option selected by default.

`RadioGroup` is a helpful wrapper used to group `Radio` components that provides an easier API, and proper keyboard accessibility to the group.

{{""blazor"": ""Skclusive.Material.Docs.App.View.RadioButtonsGroup, Skclusive.Material.Docs.App.View""}}

## Standalone Radio Buttons

`Radio` can also be used standalone, without the wrapper.

{{""blazor"": ""Skclusive.Material.Docs.App.View.RadioButtons, Skclusive.Material.Docs.App.View""}}

## Label placement

You can change the placement of the label:

{{""blazor"": ""Skclusive.Material.Docs.App.View.RadioLabelPlacement, Skclusive.Material.Docs.App.View""}}

## Customized radios

Here is an example of customizing the component. You can learn more about this in the
[overrides documentation page](/customization/components/).

{{""blazor"": ""Skclusive.Material.Docs.App.View.CustomizedRadios, Skclusive.Material.Docs.App.View""}}

## When to use

- [Checkboxes vs. Radio Buttons](https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/)

## Accessibility

(WAI-ARIA: https://www.w3.org/TR/wai-aria-practices/#radiobutton)

- All form controls should have labels, and this includes radio buttons, checkboxes, and switches. In most cases, this is done by using the `<label>` element ([FormControlLabel](/api/form-control-label/)).
- When a label can't be used, it's necessary to add an attribute directly to the input component.
In this case, you can apply the additional attribute (e.g. `aria-label`, `aria-labelledby`, `title`) via the `inputProps` property.

```html
<Radio
    Value=""checkedA""
    InputProps=""@(new Dictionary<string, object>{{ ""aria-label"", ""Radio A"" }})""
/>
```

")" />
</div>